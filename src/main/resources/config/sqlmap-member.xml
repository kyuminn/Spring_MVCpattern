<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<!-- result Type은  mybatis-config에서 정의한 alias 이름 -->
	<!-- id = 특정 쿼리문을 식별하기 위한 값 -->
	<!-- namespace 속성: 쿼리들 묶음 이름. 접근할때 네임스페이스명+쿼리ID명으로 접근 
		ex) memberDao.selecyByEmail
		지금은 mapper xml이 하나밖에 없으니까 dao 에서 바로 접근할 수 있지만
		public MemberVo selectByEmail(String email) {
		return sqlSessionTemplate.selectOne("selectByEmail",email);
	}
	 여러개의 매퍼가 있는 경우
		sqlSessionTemplate.selectOne("memberDao.selectByEmail",email); 로 네임스페이스명을 분명히해줘야 함!!
	 -->
  <mapper namespace="memberDao">
  	<select id="list" resultType="vo">
  		select * from member order by id
  	</select>
  	<select id="selectByEmail" parameterType="String" resultType="vo">
  		select * from member where email=#{email}
  	</select>
  	<insert id="insert" parameterType="vo">
  		insert into member (id,email,password,name,regdate) values 
  		(member_seq.nextval,#{email},#{password},#{name},#{regdate})
  		<selectKey keyProperty="id" resultType="Long">
  			select nvl(max(id),0) from member
  		</selectKey>
  	</insert>
  	<update id="update" parameterType="vo">
  	<!-- 알아서 vo의 getter method가 동작 -->
  		update member set name=#{name},password=#{password} where email=#{email}
  	</update>
  	<delete id="delete" parameterType="vo">
  		delete from member where email=#{email} and password=#{password}
  	</delete>
  	<delete id="deleteAll">
  		delete from member
  	</delete>
  	<select id="count" resultType="Integer">
  		select count(*) from member
  	</select>
  	<select id="selectByRegdate" parameterType="HashMap" resultType="vo">
  		select * from member where regdate between #{from} and #{to} order by regdate desc
  	</select>
  	<select id="selectById" parameterType="Long" resultType="vo">
  		select * from member where id=#{id}
  	</select>
  </mapper>
